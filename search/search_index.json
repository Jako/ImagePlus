{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Image+ Image+ is an advanced image custom template variable type for MODx Revolution. The dimensions for the uploaded image can (optionally) be configured to constrain a minimal width and/or height. The image crop could be forced to remain at a pre-set ratio. A graphical tool could be used to crop the image to the required dimensions/proportions. Requirements MODX Revolution 2.6+ PHP 5.6+ MODX Cropping Engine i.e. pThumb Features Visual Image cropping tool integrated into the MODX manager interface. Option to constrain minimal width and/or height for the uploaded image. User image crop can be forced to remain at pre-set ratio. Use a chunk as an output template and fill placeholders with url, height, width, alt-tag, phpthumb options etc of the cropped uploaded image.","title":"Description"},{"location":"#image","text":"Image+ is an advanced image custom template variable type for MODx Revolution. The dimensions for the uploaded image can (optionally) be configured to constrain a minimal width and/or height. The image crop could be forced to remain at a pre-set ratio. A graphical tool could be used to crop the image to the required dimensions/proportions.","title":"Image+"},{"location":"#requirements","text":"MODX Revolution 2.6+ PHP 5.6+ MODX Cropping Engine i.e. pThumb","title":"Requirements"},{"location":"#features","text":"Visual Image cropping tool integrated into the MODX manager interface. Option to constrain minimal width and/or height for the uploaded image. User image crop can be forced to remain at pre-set ratio. Use a chunk as an output template and fill placeholders with url, height, width, alt-tag, phpthumb options etc of the cropped uploaded image.","title":"Features"},{"location":"contributors/","text":"The Image+ project was started in 2012 by Alan Pich and is maintained and developed further since 2015 by Thomas Jakobi . Many thanks to all who contributed, whether by creating pull requests, submitting bug reports, or donating.","title":"Contributors"},{"location":"examples/","text":"Image+ could be used for several purposes. On this page you find some examples how to use it: Collections You could show the Image+ thumbnail in a Collections grid column by setting the column renderer to ImagePlus.MIGX_Renderer . MIGX If you want to use Image+ in MIGX you could define all Image+ TV properties with a JSON string in the Configs textarea in the MIGX formtabs field configuration. The following properties are possible: { \"targetWidth\":\"\", \"targetHeight\":\"\", \"targetRatio\":\"\", \"thumbnailWidth\":\"\", \"allowAltTag\":\"\", \"allowCaption\":\"\", \"allowCredits\":\"\" } And you also have to change the Input TV Type to imageplus . You could show the thumbnail in the grid column by setting the renderer to ImagePlus.MIGX_Renderer . In prior MIGX versions you have to raw edit a MIGX configuration for that. To use that Image+ -MIGX-Field in the Frontend, call the ImagePlus Snippet with just the value-parameter being the name of this MIGX-Field: [[ImagePlus? &value=`[[+migxImagePlusField]]` ]] This will get you the prepared URL for the cropped image, instead of the raw JSON-Object. getResources/pdoResources In order for the TV to be parsed with the getResources/pdoResources Snippet , make sure you add the following lines to your getResources/pdoResources Snippet call: &includeTVs=`name_of_your_tv` &processTVs=`name_of_your_tv` In the template Chunk of the getResources/pdoResources Snippet call you could use the placeholder [[+tv.name_of_your_tv]] if the Output Type of the TV is set to Image+ . Without additional changes, the placeholder contains the url to the cropped image. Using the ImagePlus Snippet inside getResources/pdoResources Template Chunk In your template Chunk for getResources/pdoResources Snippet call, you need to add one parameter so that the ImagePlus Snippet call knows the origin ID to pull data from: &docid=`[[+id]]` Here is an example call and configuration, where image is your Image+ TV: Snippet Call <div class=\"blog-articles\"> [[!pdoPage? &element=`pdoResources` &tpl=`tplBlogPost` &limit=`11` &includeContent=`1` &showHidden=`0` &hideContainers=`1` ]] </div> <div class=\"blog-paging\"> [[!+page.nav]] </div> Chunk tplBlogPost <article class=\"post\"> <header class=\"post-header\"> <h3 class=\"post-title mt0 mb1\"><a href=\"[[~[[+id]]]]\">[[+longtitle:default=`[[+pagetitle]]`]]</a></h3> [[ImagePlus? &tvname=`image` &type=`tpl` &docid=`[[+id]]` &tpl=`tplBlogIntroImg` ]] </header> <section class=\"post-excerpt\"> <p>[[+content:striptags:ellipsis=`255`:typography]] <a class=\"read-more\" href=\"[[~[[+id]]]]\">read more \u00bb</a></p> </section> <footer class=\"post-meta\"> <span class=\"post-author\">[[+createdby:userinfo=`fullname`]]</span> <time class=\"post-date\" datetime=\"[[+publishedon:date=`%B %e, %Y`]]\">[[+publishedon:date=`%B %e, %Y`]]</time> </footer> </article> Chunk tplBlogIntroImg <div class=\"feature\" style=\"margin-bottom:1rem\"> <a href=\"[[+caption]]\"><img src=\"[[+source.src:pthumb=`w=320`]]\" alt=\"[[+alt]]\" /></a> </div> Responsive images If you want to display responsive images with and without the crop, you could use the ImagePlus Snippet . Snippet Call [[ImagePlus? &tvname=`yourtvname` &type=`tpl` &options=`&w=320` &tpl=`tplResponsiveImage` &pagetitle=`[[*pagetitle]]` ]] Chunk tplResponsiveImage <picture> <source media=\"(min-width: 36em)\" srcset=\"[[+source.src:pthumb=`w=1024`]] 1024w, [[+source.src:pthumb=`w=640`]] 640w, [[+source.src:pthumb=`w=320`]] 320w\" sizes=\"33.3vw\"/> <source srcset=\"[[+source.src:pthumb=`[[+crop.options]]&w=640`]] 2x, [[+source.src:pthumb=`[[+crop.options]]&w=320`]] 1x\"/> <img src=\"[[+url]]\" alt=\"[[+alt:default=`[[+pagetitle]]`]]\"/> </picture>","title":"Examples"},{"location":"examples/#collections","text":"You could show the Image+ thumbnail in a Collections grid column by setting the column renderer to ImagePlus.MIGX_Renderer .","title":"Collections"},{"location":"examples/#migx","text":"If you want to use Image+ in MIGX you could define all Image+ TV properties with a JSON string in the Configs textarea in the MIGX formtabs field configuration. The following properties are possible: { \"targetWidth\":\"\", \"targetHeight\":\"\", \"targetRatio\":\"\", \"thumbnailWidth\":\"\", \"allowAltTag\":\"\", \"allowCaption\":\"\", \"allowCredits\":\"\" } And you also have to change the Input TV Type to imageplus . You could show the thumbnail in the grid column by setting the renderer to ImagePlus.MIGX_Renderer . In prior MIGX versions you have to raw edit a MIGX configuration for that. To use that Image+ -MIGX-Field in the Frontend, call the ImagePlus Snippet with just the value-parameter being the name of this MIGX-Field: [[ImagePlus? &value=`[[+migxImagePlusField]]` ]] This will get you the prepared URL for the cropped image, instead of the raw JSON-Object.","title":"MIGX"},{"location":"examples/#getresourcespdoresources","text":"In order for the TV to be parsed with the getResources/pdoResources Snippet , make sure you add the following lines to your getResources/pdoResources Snippet call: &includeTVs=`name_of_your_tv` &processTVs=`name_of_your_tv` In the template Chunk of the getResources/pdoResources Snippet call you could use the placeholder [[+tv.name_of_your_tv]] if the Output Type of the TV is set to Image+ . Without additional changes, the placeholder contains the url to the cropped image.","title":"getResources/pdoResources"},{"location":"examples/#using-the-imageplus-snippet-inside-getresourcespdoresources-template-chunk","text":"In your template Chunk for getResources/pdoResources Snippet call, you need to add one parameter so that the ImagePlus Snippet call knows the origin ID to pull data from: &docid=`[[+id]]` Here is an example call and configuration, where image is your Image+ TV: Snippet Call <div class=\"blog-articles\"> [[!pdoPage? &element=`pdoResources` &tpl=`tplBlogPost` &limit=`11` &includeContent=`1` &showHidden=`0` &hideContainers=`1` ]] </div> <div class=\"blog-paging\"> [[!+page.nav]] </div> Chunk tplBlogPost <article class=\"post\"> <header class=\"post-header\"> <h3 class=\"post-title mt0 mb1\"><a href=\"[[~[[+id]]]]\">[[+longtitle:default=`[[+pagetitle]]`]]</a></h3> [[ImagePlus? &tvname=`image` &type=`tpl` &docid=`[[+id]]` &tpl=`tplBlogIntroImg` ]] </header> <section class=\"post-excerpt\"> <p>[[+content:striptags:ellipsis=`255`:typography]] <a class=\"read-more\" href=\"[[~[[+id]]]]\">read more \u00bb</a></p> </section> <footer class=\"post-meta\"> <span class=\"post-author\">[[+createdby:userinfo=`fullname`]]</span> <time class=\"post-date\" datetime=\"[[+publishedon:date=`%B %e, %Y`]]\">[[+publishedon:date=`%B %e, %Y`]]</time> </footer> </article> Chunk tplBlogIntroImg <div class=\"feature\" style=\"margin-bottom:1rem\"> <a href=\"[[+caption]]\"><img src=\"[[+source.src:pthumb=`w=320`]]\" alt=\"[[+alt]]\" /></a> </div>","title":"Using the ImagePlus Snippet inside getResources/pdoResources Template Chunk"},{"location":"examples/#responsive-images","text":"If you want to display responsive images with and without the crop, you could use the ImagePlus Snippet . Snippet Call [[ImagePlus? &tvname=`yourtvname` &type=`tpl` &options=`&w=320` &tpl=`tplResponsiveImage` &pagetitle=`[[*pagetitle]]` ]] Chunk tplResponsiveImage <picture> <source media=\"(min-width: 36em)\" srcset=\"[[+source.src:pthumb=`w=1024`]] 1024w, [[+source.src:pthumb=`w=640`]] 640w, [[+source.src:pthumb=`w=320`]] 320w\" sizes=\"33.3vw\"/> <source srcset=\"[[+source.src:pthumb=`[[+crop.options]]&w=640`]] 2x, [[+source.src:pthumb=`[[+crop.options]]&w=320`]] 1x\"/> <img src=\"[[+url]]\" alt=\"[[+alt:default=`[[+pagetitle]]`]]\"/> </picture>","title":"Responsive images"},{"location":"getting-started/","text":"Creating a new Template Variable Once Image+ is installed, you can create Template Variables [TV] in the normal way, but instead of setting the Input Type in Input Options to Image , select Image+ instead. For most use cases, you should also set the Output Type in Output Options to Image+ . This allows you to control the image output on a resource. The cropping tool When using an Image+ TV, you could select an image exactly the same way as in a normal Image TV. Once an image is selected, a cropping window is displayed and you could select the area of the image to use. The original image is not changed and so you can upload a single image, and re-use it in several places at different sizes (and crops with multiple Image+ TVs) around the site. If you want to change the cropping area, you have to click on the crop trigger of the Image+ TV. In the cropping window you have to drag the handles of the dotted box to change the cropping area. If the TV was configured with size constraints or an aspect ratio, the crop area will be restricted to match this aspect ratio.","title":"Getting Started"},{"location":"getting-started/#creating-a-new-template-variable","text":"Once Image+ is installed, you can create Template Variables [TV] in the normal way, but instead of setting the Input Type in Input Options to Image , select Image+ instead. For most use cases, you should also set the Output Type in Output Options to Image+ . This allows you to control the image output on a resource.","title":"Creating a new Template Variable"},{"location":"getting-started/#the-cropping-tool","text":"When using an Image+ TV, you could select an image exactly the same way as in a normal Image TV. Once an image is selected, a cropping window is displayed and you could select the area of the image to use. The original image is not changed and so you can upload a single image, and re-use it in several places at different sizes (and crops with multiple Image+ TVs) around the site. If you want to change the cropping area, you have to click on the crop trigger of the Image+ TV. In the cropping window you have to drag the handles of the dotted box to change the cropping area. If the TV was configured with size constraints or an aspect ratio, the crop area will be restricted to match this aspect ratio.","title":"The cropping tool"},{"location":"installation/","text":"Install from MODX Extras Search for Image+ in the Package Manager of your MODX installation and install it in there. Manual installation If you can't access the MODX Extras Repository in your MODX installation, you can manually install Image+. Download the transport package from MODX Extras (or one of the pre built transport packages in _packages ) Upload the zip file to your MODX installation's core/packages folder or upload it manually in the MODX Package Manager. In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown button. Image+ should now show up in the list of available packages. Click the corresponding 'Install' button and follow the instructions to complete the installation. Build it from source To build and install the package from source you could use Git Package Management . The GitHub repository of Image+ contains a config.json to build that package locally. Use this option, if you want to debug Image+ and/or contribute bugfixes and enhancements.","title":"Installation"},{"location":"installation/#install-from-modx-extras","text":"Search for Image+ in the Package Manager of your MODX installation and install it in there.","title":"Install from MODX Extras"},{"location":"installation/#manual-installation","text":"If you can't access the MODX Extras Repository in your MODX installation, you can manually install Image+. Download the transport package from MODX Extras (or one of the pre built transport packages in _packages ) Upload the zip file to your MODX installation's core/packages folder or upload it manually in the MODX Package Manager. In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown button. Image+ should now show up in the list of available packages. Click the corresponding 'Install' button and follow the instructions to complete the installation.","title":"Manual installation"},{"location":"installation/#build-it-from-source","text":"To build and install the package from source you could use Git Package Management . The GitHub repository of Image+ contains a config.json to build that package locally. Use this option, if you want to debug Image+ and/or contribute bugfixes and enhancements.","title":"Build it from source"},{"location":"usage/","text":"Input Options In Image+ you could control the final size and aspect ratio of selected images. There are several extended input options available for an Image+ TV: Target Height/Width Images can be constrained to a minimal height and/or width with Target height and Target width . If both values are set, the target aspect ratio of the output image is calculated with this values. Both fields have to be filled with an integer value. Target Aspect Ratio The aspect ratio for the output image could be restricted with Target Aspect Ratio . If target height and target width are set, this value is ignored and the calculated aspect ratio of target height and target width is used. The field has to be filled with a float value. If you set only one value of Target Height or Target Width and leave empty Target Aspect Ratio , the size of the crop is not restricted to any aspect ratio. How to calculate the aspect ratio The aspect ratio contains a float value: this value is easily acquired by dividing any width of a desired aspect ratio by its corresponding height. So say you want to all your crops to have the same aspect ratio as a 1600x1000 image, simply divide 1600 by 1000 , resulting in 1.6 . This is your aspect ratio value. Show Alt Tag Field Image+ TVs can also contain an Alt Tag Field , which is an additional text input, that is stored with each image. It could be output alongside the image i.e. as an alt-tag or title-tag. In order to output the alt text in a Image+ TV placeholder, you will need to select an chunk in the Output Options . You could also use the ImagePlus snippet and specify a template chunk in the snippet call options. The alt text is filled in the placeholder [[+alt]] in that chunk. Show Caption Field Image+ TVs can also contain an Caption Field , which is an additional text input, that is stored with each image. It could be output beneath the image i.e. in an additional caption div. In order to output the caption in a Image+ TV placeholder, you will need to select an chunk in the Output Options . You could also use the ImagePlus snippet and specify a template chunk in the snippet call options. The caption is filled in the placeholder [[+caption]] in that chunk. Show Credits Field Image+ TVs can also contain an Credits Field , which is an additional text input, that is stored with each image. It could be output beneath the image i.e. in an additional credits div. In order to output the credits in a Image+ TV placeholder, you will need to select an chunk in the Output Options . You could also use the ImagePlus snippet and specify a template chunk in the snippet call options. The credits are filled in the placeholder [[+credits]] in that chunk. Context/System Settings Each Image+ TV Input Option could be superceded by a context setting or a system setting. And context/system settings for a single TV could be defined, too. There are predefined system settings in the imageplus namespace, that are empty or equal zero. If you enable one or fill it with a value, this setting will supercede the Input Options of all Image+ TVs. Context settings have to be created before usage. The global context/system settings have the prefix imageplus. and the single TV context/system settings have the prefix imageplus.{tvname}. . {tvname} has to be replaced by the name of the template variable. The order for those settings is 1 TV name based context setting TV name based system setting context setting system setting In the imageplus.select_config system setting, you could create predefined crop sizes/aspect ratios with a helper grid. To force use the predefined sizes/ratios, you could enable the imageplus.force_config system setting. Output Options There are several extended output options available for of an Image+ TV: Additional phpThumb Parameters As default an Image+ TV returns an relative URL to an cropped (and maybe constrained) image that is scaled by phpThumb. With this output option, you could assign several additional phpThumb parameters, that are used to generate the thumbnail image. Output Chunk If you select an Output Chunk the TV output is rendered with that chunk. Select the chunk name from the dropdown. Several placeholders are possible in that chunk to customize the output: Placeholder Description url URL of the thumbnail image alt Alt text width Minimal width of the thumbnail image height Minimal height of the thumbnail image source.src Full path of the source image on the server (not a URL) source.width Width of the source image source.height Height of the source image crop.width Crop width of the thumbnail image crop.height Crop height of the thumbnail image crop.x Crop x position of the thumbnail image crop.y Crop y position of the thumbnail image options Crop engine full option string to generate the thumbnail image crop.options Crop engine crop option string to generate the thumbnail image All these placeholders could be used in the Snippet too. Generate Thumb URL If you create the thumbnail in output chunk i.e. by a pthumb output filter, you could disable the generation of the internal thumb URL. Caution You have to activate this option, when you don't specify an output chunk in the output options or when you use the [[+url]] placeholder in the specified output chunk. Otherwise the image is not cropped/resized and the original image path is returned. Snippet The snippet gives you a second option to render the TV value. With the template variable output, you are restricted to one output chunk per template variable, with the snippet you could be more flexiple use different output chunks. The following properties could be set in the snippet call: Property Description Default tvname Name of the Image+ TV. - docid Resource where the Image+ TV value is received from. Current resource type Type of the snippet output. Could be set to check 2 , tpl 3 and thumb 4 . thumb options Extended phpThumb options for the image 5 . - tpl Template chunk for the snippet output 6 . ImagePlus.image value Use your own JSON encoded value for the snippet output. The properties tvname and docid are ignored. - debug Log debug informations in MODX error log. 0 (No) Example [[ImagePlus? &tvname=`imageplus` &docid=`1` &options=`w=100` &type=`tpl` &tpl=`ImagePlus.demo` ]] This snippet call outputs the content of the template variable with the name imageplus of resource 1 and the extended phpThumb option &w=100 (width: 100px) in the parsed ImagePlus.demo chunk. The first entry supercedes the second entry in the list etc. \u21a9 Outputs image if the Image+ TV contains an image, otherwise noimage . \u21a9 Outputs the parsed template set by tpl property for retreived Image+ TV value (with additional options set by the options property) \u21a9 Outputs the thumbnail URL for retreived Image+ TV value (with additional options set by the options property) \u21a9 See phpThumb readme for possible options. Maybe not all options are valid in your installation (because of crop engine limitations or server restricions). \u21a9 The template chunk placeholder are the same as in the output chunk of the template variable. \u21a9","title":"Usage"},{"location":"usage/#input-options","text":"In Image+ you could control the final size and aspect ratio of selected images. There are several extended input options available for an Image+ TV:","title":"Input Options"},{"location":"usage/#target-heightwidth","text":"Images can be constrained to a minimal height and/or width with Target height and Target width . If both values are set, the target aspect ratio of the output image is calculated with this values. Both fields have to be filled with an integer value.","title":"Target Height/Width"},{"location":"usage/#target-aspect-ratio","text":"The aspect ratio for the output image could be restricted with Target Aspect Ratio . If target height and target width are set, this value is ignored and the calculated aspect ratio of target height and target width is used. The field has to be filled with a float value. If you set only one value of Target Height or Target Width and leave empty Target Aspect Ratio , the size of the crop is not restricted to any aspect ratio. How to calculate the aspect ratio The aspect ratio contains a float value: this value is easily acquired by dividing any width of a desired aspect ratio by its corresponding height. So say you want to all your crops to have the same aspect ratio as a 1600x1000 image, simply divide 1600 by 1000 , resulting in 1.6 . This is your aspect ratio value.","title":"Target Aspect Ratio"},{"location":"usage/#show-alt-tag-field","text":"Image+ TVs can also contain an Alt Tag Field , which is an additional text input, that is stored with each image. It could be output alongside the image i.e. as an alt-tag or title-tag. In order to output the alt text in a Image+ TV placeholder, you will need to select an chunk in the Output Options . You could also use the ImagePlus snippet and specify a template chunk in the snippet call options. The alt text is filled in the placeholder [[+alt]] in that chunk.","title":"Show Alt Tag Field"},{"location":"usage/#show-caption-field","text":"Image+ TVs can also contain an Caption Field , which is an additional text input, that is stored with each image. It could be output beneath the image i.e. in an additional caption div. In order to output the caption in a Image+ TV placeholder, you will need to select an chunk in the Output Options . You could also use the ImagePlus snippet and specify a template chunk in the snippet call options. The caption is filled in the placeholder [[+caption]] in that chunk.","title":"Show Caption Field"},{"location":"usage/#show-credits-field","text":"Image+ TVs can also contain an Credits Field , which is an additional text input, that is stored with each image. It could be output beneath the image i.e. in an additional credits div. In order to output the credits in a Image+ TV placeholder, you will need to select an chunk in the Output Options . You could also use the ImagePlus snippet and specify a template chunk in the snippet call options. The credits are filled in the placeholder [[+credits]] in that chunk.","title":"Show Credits Field"},{"location":"usage/#contextsystem-settings","text":"Each Image+ TV Input Option could be superceded by a context setting or a system setting. And context/system settings for a single TV could be defined, too. There are predefined system settings in the imageplus namespace, that are empty or equal zero. If you enable one or fill it with a value, this setting will supercede the Input Options of all Image+ TVs. Context settings have to be created before usage. The global context/system settings have the prefix imageplus. and the single TV context/system settings have the prefix imageplus.{tvname}. . {tvname} has to be replaced by the name of the template variable. The order for those settings is 1 TV name based context setting TV name based system setting context setting system setting In the imageplus.select_config system setting, you could create predefined crop sizes/aspect ratios with a helper grid. To force use the predefined sizes/ratios, you could enable the imageplus.force_config system setting.","title":"Context/System Settings"},{"location":"usage/#output-options","text":"There are several extended output options available for of an Image+ TV:","title":"Output Options"},{"location":"usage/#additional-phpthumb-parameters","text":"As default an Image+ TV returns an relative URL to an cropped (and maybe constrained) image that is scaled by phpThumb. With this output option, you could assign several additional phpThumb parameters, that are used to generate the thumbnail image.","title":"Additional phpThumb Parameters"},{"location":"usage/#output-chunk","text":"If you select an Output Chunk the TV output is rendered with that chunk. Select the chunk name from the dropdown. Several placeholders are possible in that chunk to customize the output: Placeholder Description url URL of the thumbnail image alt Alt text width Minimal width of the thumbnail image height Minimal height of the thumbnail image source.src Full path of the source image on the server (not a URL) source.width Width of the source image source.height Height of the source image crop.width Crop width of the thumbnail image crop.height Crop height of the thumbnail image crop.x Crop x position of the thumbnail image crop.y Crop y position of the thumbnail image options Crop engine full option string to generate the thumbnail image crop.options Crop engine crop option string to generate the thumbnail image All these placeholders could be used in the Snippet too.","title":"Output Chunk"},{"location":"usage/#generate-thumb-url","text":"If you create the thumbnail in output chunk i.e. by a pthumb output filter, you could disable the generation of the internal thumb URL. Caution You have to activate this option, when you don't specify an output chunk in the output options or when you use the [[+url]] placeholder in the specified output chunk. Otherwise the image is not cropped/resized and the original image path is returned.","title":"Generate Thumb URL"},{"location":"usage/#snippet","text":"The snippet gives you a second option to render the TV value. With the template variable output, you are restricted to one output chunk per template variable, with the snippet you could be more flexiple use different output chunks. The following properties could be set in the snippet call: Property Description Default tvname Name of the Image+ TV. - docid Resource where the Image+ TV value is received from. Current resource type Type of the snippet output. Could be set to check 2 , tpl 3 and thumb 4 . thumb options Extended phpThumb options for the image 5 . - tpl Template chunk for the snippet output 6 . ImagePlus.image value Use your own JSON encoded value for the snippet output. The properties tvname and docid are ignored. - debug Log debug informations in MODX error log. 0 (No)","title":"Snippet"},{"location":"usage/#example","text":"[[ImagePlus? &tvname=`imageplus` &docid=`1` &options=`w=100` &type=`tpl` &tpl=`ImagePlus.demo` ]] This snippet call outputs the content of the template variable with the name imageplus of resource 1 and the extended phpThumb option &w=100 (width: 100px) in the parsed ImagePlus.demo chunk. The first entry supercedes the second entry in the list etc. \u21a9 Outputs image if the Image+ TV contains an image, otherwise noimage . \u21a9 Outputs the parsed template set by tpl property for retreived Image+ TV value (with additional options set by the options property) \u21a9 Outputs the thumbnail URL for retreived Image+ TV value (with additional options set by the options property) \u21a9 See phpThumb readme for possible options. Maybe not all options are valid in your installation (because of crop engine limitations or server restricions). \u21a9 The template chunk placeholder are the same as in the output chunk of the template variable. \u21a9","title":"Example"}]}